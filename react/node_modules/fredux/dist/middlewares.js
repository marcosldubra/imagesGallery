"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.versionedPromiseActionMiddleware = exports.promiseActionMiddleware = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _symbols = require("./symbols");

var _actions = require("./actions");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function deleteApiCall(action) {
  var newAction = _extends({}, action);
  delete newAction[_symbols.PROMISE_CALL];
  return newAction;
}

var addMeta = function addMeta(key) {
  return function (value) {
    return function (_ref) {
      var meta = _ref.meta,
          action = _objectWithoutProperties(_ref, ["meta"]);

      return _extends({ meta: _extends({}, meta, _defineProperty({}, key, value)) }, action);
    };
  };
};
var addMetaFlag = function addMetaFlag(key) {
  return addMeta(key)(true);
};

var setFredux = addMetaFlag("freduxAction");
var setChangeVersion = addMetaFlag("changeVersion");

var setId = addMeta("id");
var setVersion = addMeta("version");

var isPromiseAction = function isPromiseAction(action) {
  return Boolean(action[_symbols.PROMISE_CALL]);
};
var isDiscardeableAction = function isDiscardeableAction(_ref2, version) {
  var _ref2$meta = _ref2.meta,
      meta = _ref2$meta === undefined ? {} : _ref2$meta;
  return meta.version !== undefined && meta.version !== version;
};

var processPromiseAction = function processPromiseAction(store, action, decorate) {

  var enhance = function enhance(action) {
    return decorate(deleteApiCall(action));
  };
  var promiseCall = action[_symbols.PROMISE_CALL];

  store.dispatch(enhance(_extends({}, action, { type: (0, _actions.requestType)(action.type) })));

  promiseCall().then(function (response) {
    return store.dispatch(enhance(_extends({}, action, {
      type: (0, _actions.successType)(action.type),
      payload: _extends({}, action.payload, { response: response })
    })));
  }, function (error) {
    return store.dispatch(enhance(_extends({}, action, {
      type: (0, _actions.failureType)(action.type),
      error: true,
      payload: _extends({}, action.payload, { error: error })
    })));
  });
};

var promiseActionMiddleware = exports.promiseActionMiddleware = function promiseActionMiddleware(store) {
  return function (next) {
    var i = 0;

    function nextId() {
      return ++i;
    }

    return function (action) {
      if (!isPromiseAction(action)) {
        return next(action);
      }

      var id = nextId();
      var decorate = function decorate(action) {
        return setFredux(setId(id)(action));
      };
      processPromiseAction(store, action, decorate);
    };
  };
};

var versionedPromiseActionMiddleware = exports.versionedPromiseActionMiddleware = function versionedPromiseActionMiddleware(versionSelector) {
  return function (store) {
    return function (next) {

      var i = 0;

      function nextId() {
        return ++i;
      }

      return function (action) {
        if (isPromiseAction(action)) {
          var version = versionSelector(store.getState());
          var id = nextId();
          var decorate = function decorate(action) {
            return setFredux(setId(id)(setVersion(version)(action)));
          };
          processPromiseAction(store, action, decorate);
          return;
        }

        if (isDiscardeableAction(action, versionSelector(store.getState()))) {
          return;
        }

        return next(action[_symbols.CHANGE_VERSION] ? setChangeVersion(action) : action);
      };
    };
  };
};